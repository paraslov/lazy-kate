import os
import pandas as pd
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import tempfile
import re

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8360015141:AAGOC_Y4SWIFMFnuiwhoeh7XVtViDv0A50k"

class TableProcessor:
    def __init__(self):
        pass
    
    def format_amount(self, amount):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if pd.isna(amount) or amount == '':
            return ''
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        try:
            if isinstance(amount, str):
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
                amount_clean = amount.replace(' ', '').replace(',', '.')
                amount_num = float(amount_clean)
            else:
                amount_num = float(amount)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
            if amount_num == int(amount_num):
                return f"{int(amount_num):,}".replace(',', ' ')
            else:
                return f"{amount_num:,.2f}".replace(',', ' ')
        except:
            return str(amount)
    
    def process_table(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º
            if file_path.endswith('.csv'):
                df = pd.read_csv(file_path, encoding='utf-8')
            else:
                df = pd.read_excel(file_path)
            
            messages = []
            
            for index, row in df.iterrows():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º iloc –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
                    col_2 = str(row.iloc[1]) if len(row) > 1 and not pd.isna(row.iloc[1]) else ""
                    col_3 = str(row.iloc[2]) if len(row) > 2 and not pd.isna(row.iloc[2]) else ""
                    col_5 = str(row.iloc[4]) if len(row) > 4 and not pd.isna(row.iloc[4]) else ""
                    col_6 = str(row.iloc[5]) if len(row) > 5 and not pd.isna(row.iloc[5]) else ""
                    col_8 = self.format_amount(row.iloc[7]) if len(row) > 7 else ""
                    col_15 = str(row.iloc[14]) if len(row) > 14 and not pd.isna(row.iloc[14]) else ""
                    col_25 = str(row.iloc[24]) if len(row) > 24 and not pd.isna(row.iloc[24]) else ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–æ–ª–±—Ü–µ 25
                    if col_25 and col_25.lower() not in ['nan', '', 'none']:
                        # –§–æ—Ä–º–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ 25
                        message = f"""–ó–∞—è–≤–∫–∞ ¬´{col_2}¬ª: —Å—É–º–º–∞ {col_8}; –ø–æ–ª—É—á–µ–Ω–∏–µ —É ¬´{col_5}¬ª (¬´{col_25}¬ª), —Å—Ç–∞–≤–∫–∞ ¬´{col_15}¬ª; –ø–ª–∞—Ç–∏—Ç—å —Å ¬´{col_3}¬ª –Ω–∞ ¬´{col_6}¬ª (—Å–º. —Å—á—ë—Ç):"""
                    else:
                        # –§–æ—Ä–º–∞—Ç –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–µ 25
                        message = f"""–ó–∞—è–≤–∫–∞ ¬´{col_2}¬ª: —Å—É–º–º–∞ {col_8}; –ø–æ–ª—É—á–µ–Ω–∏–µ —É ¬´{col_5}¬ª, —Å—Ç–∞–≤–∫–∞ ¬´{col_15}¬ª; –ø–ª–∞—Ç–∏—Ç—å —Å ¬´{col_3}¬ª –Ω–∞ ¬´{col_6}¬ª (—Å–º. —Å—á—ë—Ç):"""
                    
                    messages.append(message)
                    
                except Exception as e:
                    messages.append(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 1}: {str(e)}")
            
            return messages
            
        except Exception as e:
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"]

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
processor = TableProcessor()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü.

üìã –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Excel (.xlsx, .xls) –∏ CSV —Ñ–∞–π–ª—ã
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è

üì§ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª —Å —Ç–∞–±–ª–∏—Ü–µ–π
2. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

üí° –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü 25 –ø—É—Å—Ç–æ–π: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
‚Ä¢ –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü 25 –∑–∞–ø–æ–ª–Ω–µ–Ω: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üìä
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:
‚Ä¢ Excel: .xlsx, .xls
‚Ä¢ CSV: .csv

üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1):
‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 2: –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 3: –æ—Ç–∫—É–¥–∞ –ø–ª–∞—Ç–∏—Ç—å
‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 5: —É –∫–æ–≥–æ –ø–æ–ª—É—á–∞—Ç—å
‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 6: –∫—É–¥–∞ –ø–ª–∞—Ç–∏—Ç—å
‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 8: —Å—É–º–º–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è)
‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 15: —Å—Ç–∞–≤–∫–∞
‚Ä¢ –°—Ç–æ–ª–±–µ—Ü 25: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

‚öôÔ∏è –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
1. –ë–µ–∑ —Å—Ç–æ–ª–±—Ü–∞ 25:
   –ó–∞—è–≤–∫–∞ ¬´–Ω–æ–º–µ—Ä¬ª: —Å—É–º–º–∞ —Å—É–º–º–∞; –ø–æ–ª—É—á–µ–Ω–∏–µ —É ¬´–ø–æ–ª—É—á–∞—Ç–µ–ª—å¬ª, —Å—Ç–∞–≤–∫–∞ ¬´—Å—Ç–∞–≤–∫–∞¬ª; –ø–ª–∞—Ç–∏—Ç—å —Å ¬´–æ—Ç–∫—É–¥–∞¬ª –Ω–∞ ¬´–∫—É–¥–∞¬ª (—Å–º. —Å—á—ë—Ç):

2. –°–æ —Å—Ç–æ–ª–±—Ü–æ–º 25:
   –ó–∞—è–≤–∫–∞ ¬´–Ω–æ–º–µ—Ä¬ª: —Å—É–º–º–∞ —Å—É–º–º–∞; –ø–æ–ª—É—á–µ–Ω–∏–µ —É ¬´–ø–æ–ª—É—á–∞—Ç–µ–ª—å¬ª (¬´–¥–æ–ø_–∏–Ω—Ñ–æ¬ª), —Å—Ç–∞–≤–∫–∞ ¬´—Å—Ç–∞–≤–∫–∞¬ª; –ø–ª–∞—Ç–∏—Ç—å —Å ¬´–æ—Ç–∫—É–¥–∞¬ª –Ω–∞ ¬´–∫—É–¥–∞¬ª (—Å–º. —Å—á—ë—Ç):

üîß –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
‚Ä¢ –ù–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
‚Ä¢ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    """
    await update.message.reply_text(help_text)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not (document.file_name.endswith(('.xlsx', '.xls', '.csv'))):
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls) –∏ CSV (.csv)")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(document.file_name)[1]) as tmp_file:
            await file.download_to_drive(tmp_file.name)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            messages = processor.process_table(tmp_file.name)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_file.name)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not messages:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
        await update.message.reply_text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(messages)}\n\nüìã –ì–æ—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, message in enumerate(messages, 1):
            # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(message) > 4000:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
                for j, part in enumerate(parts):
                    await update.message.reply_text(f"üìÑ –ó–∞–ø–∏—Å—å {i} (—á–∞—Å—Ç—å {j+1}):\n{part}")
            else:
                await update.message.reply_text(f"üìÑ –ó–∞–ø–∏—Å—å {i}:\n{message}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            await asyncio.sleep(0.1)
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(f"üéâ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages)} –∑–∞–ø–∏—Å–µ–π.")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–∞–±–ª–∏—Ü–µ–π (Excel –∏–ª–∏ CSV).\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏."
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()